

package com.example.suivreapp.service;

import io.jsonwebtoken.security.Keys;



import java.security.Key;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;


import io.jsonwebtoken.JwtException;

import com.example.suivreapp.model.Patient;
import com.example.suivreapp.model.User;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;








import io.jsonwebtoken.*;

import java.util.*;

@Service
public class JwtService {

    // 256-bit secret key for regular authentication
    public static final String SECRET_KEY = "39C9467AE5638297DD42C9F133C61" + "39C9467AE5638297DD42C9F133C61"; 

    // 512-bit secret key for reset tokens (or you can create a new one, like this)
    private static final String RESET_SECRET_KEY = "]=hC'y&cN1Yl?EzR*#fXPT!0`fLjDu/|V>sdQ{`(vj$LmhnX4af$y0M}]o#X839Y"; 

    private long jwtExpiration = 3600000;  // 1 hour expiration time (adjust if needed)
    private long resetTokenExpiration = 86400000;  // 24 hours expiration time for reset token

    // Generate JWT token for regular login (authentication)
    public String generateAuthToken(UserDetails userDetails) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("role", userDetails.getAuthorities().stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toList()));
        return buildToken(claims, userDetails, jwtExpiration, SECRET_KEY);
    }

   
    // Generate JWT token for User or Patient (use the regular key for login)
    public String buildToken(Map<String, Object> claims, UserDetails userDetails, long expiration, String secretKey) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + expiration))
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();
    }

    // Validate the token (for regular login)
    public boolean validateAuthToken(String token) {
        try {
            extractUsername(token, SECRET_KEY);  // This will validate the token using the regular secret key
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            System.out.println("Invalid JWT token: " + e.getMessage());
            return false;
        }
    }

    // Validate the password reset token (using the reset secret key)
    public boolean validateResetToken(String token) {
        try {
            extractUsername(token, RESET_SECRET_KEY);  // This will validate the token using the reset secret key
            return true;
        } catch (JwtException | IllegalArgumentException e) {
            System.out.println("Invalid reset token: " + e.getMessage());
            return false;
        }
    }

    // Extract username from regular JWT token
    public String extractUsername(String token, String secretKey) {
        return extractClaim(token, Claims::getSubject, secretKey);
    }

    // Extract claims from JWT token using a specific key
    public <T> T extractClaim(String token, Function<Claims, T> claimsResolver, String secretKey) {
        final Claims claims = extractAllClaims(token, secretKey);
        return claimsResolver.apply(claims);
    }

    // Extract all claims from JWT token
    private Claims extractAllClaims(String token, String secretKey) {
        return Jwts.parserBuilder()
                .setSigningKey(secretKey)  // Using the appropriate key
                .build()
                .parseClaimsJws(token)
                .getBody();
    }
    
    public String generateResetToken(String email) {
        return Jwts.builder()
            .setSubject(email)
            .setIssuedAt(new Date())
            .setExpiration(new Date(System.currentTimeMillis() + resetTokenExpiration))
            .signWith(SignatureAlgorithm.HS512, RESET_SECRET_KEY)
            .compact();
    }




    // Extract email from reset token
    public String extractEmailFromResetToken(String token) {
        Claims claims = extractAllClaims(token, RESET_SECRET_KEY);
        return claims.getSubject();
    }

    // Check if the token has expired
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }

    // Extract expiration date from token
    private Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration, SECRET_KEY);
    }
}
