package com.example.suivreapp.model;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import jakarta.persistence.*;




@Entity
@Table(name = "users")

public class User implements UserDetails {
	

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY) // ID in BIGINT
	private Long id;

	@Column(nullable = false, unique = true)
	private String username;

	@Column(nullable = false, unique = true)
	private String email;

	@Column(nullable = false)
	private String password;

	 @Enumerated(EnumType.STRING)  // Use Enum mapping to store the role as a string in DB
	    private Role role;  // Change the role to an Enum type

    @OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
	private Doctor doctor;
    
    @Column(name = "doctor_id")  // âœ… Ensure this field exists in the users table
    private Long doctorId; 


	@OneToOne(mappedBy = "user", cascade = CascadeType.ALL)
	private Patient patient;

	@Column(name = "verification_code")
	private String verificationCode;
	@Column(name = "verification_expiration")
	private LocalDateTime verificationCodeExpiresAt;
	private boolean enabled;

	// Constructor with parameters
	public User(String username, String email, String password, Role role) {
		this.username = username;
		this.email = email;
		this.password = password;
		this.role = role;
	}

	public String getVerificationCode() {
		return verificationCode;
	}

	public void setVerificationCode(String verificationCode) {
		this.verificationCode = verificationCode;
	}

	public LocalDateTime getVerificationCodeExpiresAt() {
		return verificationCodeExpiresAt;
	}

	public void setVerificationCodeExpiresAt(LocalDateTime verificationCodeExpiresAt) {
		this.verificationCodeExpiresAt = verificationCodeExpiresAt;
	}

	public boolean isEnabled() {
		return enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	// Getters and Setters
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Role getRole() {
		return role;
	}

	public void setRole(Role role) {
		this.role = role;
	}

	public Doctor getDoctor() {
		return doctor;
	}

	public void setDoctor(Doctor doctor) {
	    this.doctor = doctor;
	    if (doctor != null) {
	        this.doctorId = doctor.getId();  // Ensure doctor_id is set here
	        System.out.println("Setting doctor for user. Doctor ID: " + this.doctorId);
	        doctor.setUser(this);
	    }
	}



	public Long getDoctorId() {
		return doctorId;
	}

	public void setDoctorId(Long doctorId) {
		this.doctorId = doctorId;
	}

	public Patient getPatient() {
		return patient;
	}

	public void setPatient(Patient patient) {
		this.patient = patient;
		if (patient != null) {
	        System.out.println("Setting doctor for user. patient ID1231121312321: ");
	        patient.setUser(this);
	    }
	}

	// Default constructor
	public User() {
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		// Assuming your role is stored as a String, e.g., "ROLE_USER"
		return List.of(new SimpleGrantedAuthority("ROLE_" + role)); // Change based on your role structure
	}

}
